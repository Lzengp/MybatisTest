<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理 ，理解sql隔离
注意:使用mapper代理方法开发，namespace有特殊重要的作用-->
<mapper namespace="cn.hnust.mybatis.mapper.UserMapper">
	<!-- 开启本mapper的namespace的二级缓存 -->
	<cache/>
	<!--在映射文件中配置很多sql语句
		需求:通过id查询用户表的记录
		通过select执行数据库查询
	id：标识映射文件的sql
	将sql语句封装到mappedStatement对象中，所以id称为statement的id
	parameterType：指定输入参数的类型，这里指定int型
	#{}表示一个占位符号
	#{id}：其中的id表示接收输入的参数，参数名称就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以value或其它名称
	
	resultType：指定sql输出结果的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象 
	 -->

	 <!-- SQL片段 
	 	基于单表，增加可重用性，不要where
	 -->
	 <sql id="findUserList_sql">
	 	<if test="userCustomer!=null">
	 			<if test="userCustomer.sex!=null and userCustomer.sex!='' ">
	 				and sex=#{userCustomer.sex} 
	 			</if>
	 			<if test="userCustomer.address!=null and userCustomer.address!='' ">
	 				and address=#{userCustomer.address}
	 			</if>
	 		</if>
	 </sql>
	 <!-- 多条件查询，动态SQL -->
	 <select id="findUserList" parameterType="cn.hnust.mybatis.first.UserQueryVo"
	 		 resultType="cn.hnust.mybatis.first.UserCustomer" >
	 	select * from user 
	 	<!--  where会自动去掉第一个and -->
	 	<where>
	 		<!-- 添加SQL片段 -->
	 		<include refid="findUserList_sql"></include>
	 		
	 		<!-- foreach 
	 			查询	select * from user where id=2 or id=3 or id=23
	 			collection:指定输入对象集合属性
	 			item：每个遍历生成对象
	 			open：开始遍历时拼接的串(where会把第一个and去掉)
	 			close：结束遍历时拼接的串
	 			separator：遍历的两个对象中需要拼接的串
	 		-->
	 		<if test="ids!=null">
	 			<foreach collection="ids" item="user_id" open="and (" close=")" separator="or">
	 			id= #{user_id}
	 			</foreach>
	 		</if>
	 		<!-- 另一种写法的查询
	 		SELECT * FROM user WHERE id IN(2,3,23) 
	 		<if test="ids!=null">
	 			<foreach collection="ids" item="user_id" open=" and id IN(" close=")" separator=",">
	 			#{user_id}
	 			</foreach>
	 		</if>
	 		-->
	 		
	 	</where>
	 </select>
	 <!-- 查询所有 -->
	 <select id="findAllUser" resultType="user">
	 		select * from user
	 </select>
	 
	 <!-- 根据id查询 -->
	 <select id="findUserById" parameterType="int" resultType="cn.hnust.mybatis.first.User">
	 	SELECT * FROM USER WHERE id=#{id}
	 </select>
	 <!-- 需求：根据用户名模糊查询 
	 	resultType不管返回是单条数据还是多条数据都是将单条记录映射成的java对象
	 	${}:表示拼接sql串，将接收到的参数的内容不加任何修饰拼接在sql中
	 	使用${}拼接sql，引起sql注入
	 	${value}:接收输入参数的内容，如果是传入类型是简单类型，${}中只能写value
	 	-->
	  <select id="findUserByUsername" parameterType="string" resultType="cn.hnust.mybatis.first.User">
	 	SELECT * FROM USER WHERE username like '%${value}%'
	 </select>
	 <!-- 添加用户
	 	parameterType:指定输入参数
	  -->
	  <insert id="insertUser" parameterType="cn.hnust.mybatis.first.User">
	 	insert into user(username,sex,birthday,address) values(#{username},#{sex},#{birthday},#{address})
	 	
	 	<!-- 将插入数据的主键返回，返回到user对象中 
	  		SELECT LAST_INSERT_ID():得到insert进去记录的主键值，只适合自增主键
	  		keyProperty：将查询到的主键设置到parameterType指定的对象的那个属性
	  		order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
	  		resultType：指定SELECT LAST_INSERT_ID()的结果类型
	  	-->
	  	<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
	  		SELECT LAST_INSERT_ID()
	  	</selectKey>
	 </insert>
	 
	<!-- 根据id删除用户 -->
	<delete id="deleteUser" parameterType="java.lang.Integer" >
		delete from user where id=#{id}
	</delete>
	
	<!-- 根据id更新用户 -->
	<update id="updateUser" parameterType="cn.hnust.mybatis.first.User">
		update  user  set username=#{username},sex=#{sex},birthday=#{birthday},address=#{address}
		where id=#{id}
	</update>
</mapper>
